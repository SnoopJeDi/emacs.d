* org-olp                                                      :experimental:

This module provides some useful functions for working with org "olp" paths.

- =org-olp-select= (file-name olp)
  Pass an olp pointing to a heading in file-name to select from a list of child
  headings to navigate to it.
- =org-olp-make-olp= (file-name)
  Select headings from file-name, from top-level, until a header with no children is
  reached. An olp list is returned.
- =org-olp-jump= (file-name)
  Runs =org-olp-select= on a file, then visits the selected heading.

** private
*** org-olp--matches-in-buffer
#+begin_src emacs-lisp
  (defun org-olp--matches-in-buffer (regexp &optional buffer)
    "return a list of matches of REGEXP in BUFFER or the current buffer if not given."
    (let ((matches))
      (save-match-data
        (save-excursion
          (with-current-buffer (or buffer (current-buffer))
            (save-restriction
              (widen)
              (goto-char 1)
              (while (search-forward-regexp regexp nil t 1)
                (push (match-string 1) matches)))))
        matches)))
#+end_src

*** org-olp--subheadings-at-point
#+begin_src emacs-lisp
  (defun org-olp--subheadings-at-point (&optional recursive)
    "Return a list of subheadings.  If RECURSIVE is truthy return a
  list of all headings in subheading subtrees."
    (org-save-outline-visibility t
      (save-excursion
        (let ((pred (lambda () (org-entry-get nil "ITEM"))))
          (if recursive
              (org-map-entries pred nil 'tree)
            (progn
              (org-back-to-heading t)
              (org-show-subtree)
              (if (org-goto-first-child)
                  (cl-loop collect (funcall pred)
                           until (let ((pos (point)))
                                   (null (org-forward-heading-same-level nil t))
                                   (eq pos (point)))))))))))
#+end_src

*** org-olp--olp-subheadings
#+begin_src emacs-lisp
  (defun org-olp--olp-subheadings (olp)
    (goto-char (org-find-olp olp 't))
    (org-olp--subheadings-at-point))
#+end_src

*** org-olp--file-olp-subheadings
#+begin_src emacs-lisp
  (defun org-olp--file-olp-subheadings (file-name olp)
    (find-file (expand-file-name file-name))
    (org-olp--olp-subheadings olp))
#+end_src

*** org-olp--pick-olp
#+begin_src emacs-lisp
  (defun org-olp--pick-olp (file-name children olp)
    (with-temp-buffer
        (insert-file-contents file-name)
        (org-mode)
        (let* ((selection (completing-read "Select header:" children))
               (olp (append olp (list selection)))
               (children (org-olp--olp-subheadings olp)))
          (if children
              (org-olp--pick-olp file-name children olp)
            olp))))
#+end_src

*** org-olp--goto
#+begin_src emacs-lisp
  (defun org-olp--goto (file-name olp)
    (find-file (expand-file-name file-name))
    (org-set-startup-visibility)
    (org-cycle '(64))
    (goto-char (org-find-olp olp t))
    (org-cycle '(4))
    (call-interactively 'org-cycle)
    (call-interactively 'recenter-top-bottom))
#+end_src

** public
*** org-olp-select
#+begin_src emacs-lisp
  (defun org-olp-select (file olp)
    (let* ((file-name (expand-file-name file))
           (candidates (org-olp--file-olp-subheadings file olp))
           (prompt (s-join " " olp))
           (selection (completing-read prompt candidates))
           (olp (append olp (list selection))))
      (org-olp--goto file-name olp)))

  ;; (org-olp-select "~/life/dnd/tables.org" '("Treasure"))
#+end_src

*** org-olp-make-olp
#+begin_src emacs-lisp
  (defun org-olp-make-olp (file-name &rest olp)
    (let* ((file-name (expand-file-name file-name)))
      (with-temp-buffer
        (insert-file-contents file-name)
        (org-mode)
        (if olp
            (let ((children (org-olp--olp-subheadings olp)))
              (org-olp--pick-olp file-name children olp))
          (let* ((top-headers (org-olp--matches-in-buffer "^\\*[ ]+\\(.+\\)$"))
                 (first-header (completing-read "Select header:" top-headers))
                 (olp (list first-header))
                 (children (org-olp--olp-subheadings olp)))
            (org-olp--pick-olp file-name children olp))))))

  ;; (org-olp-make-olp "~/life/dnd/tables.org")
  ;; (org-olp-make-olp "~/life/dnd/tables.org" "Treasure")
#+end_src

*** org-olp-jump
#+begin_src emacs-lisp
  (defun org-olp-jump (file-name &rest olp)
    (let ((file-name (expand-file-name file-name))
          (olp (apply 'org-olp-make-olp file-name olp)))
      (org-olp--goto file-name olp)))
  ;; (org-olp-jump "~/life/dnd/tables.org")
  ;; (org-olp-jump "~/life/dnd/tables.org" "Treasure")
#+end_src

