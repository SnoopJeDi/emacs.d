#+language: en
#+startup: overview indent align
#+babel: :cache no
#+options: ^:nil num:nil tags:nil toc:nil* OS-specific
#+title: Emacs config, org-mode style.
#+description: A literate programming-style exposition of my Emacs configuration
* OS-specific
** macOS
Disable command-q
#+begin_src emacs-lisp
(global-unset-key (kbd "s-q"))
#+end_src

** Linux
Disable doc-view-mode defaults for pdf files (prefer evince).
#+begin_src emacs-lisp
(defun ensc/mailcap-mime-data-filter (filter)
  ""
  (mapcar (lambda(major)
        (append (list (car major))
            (remove nil
                (mapcar (lambda(minor)
                      (when (funcall filter (car major) (car minor) (cdr minor))
                    minor))
                    (cdr major)))))
      mailcap-mime-data))

(defun ensc/no-pdf-doc-view-filter (major minor spec)
  (if (and (string= major "application")
       (string= minor "pdf")
       (member '(viewer . doc-view-mode) spec))
      nil
    t))

(eval-after-load 'mailcap
  '(progn
     (setq mailcap-mime-data
       (ensc/mailcap-mime-data-filter 'ensc/no-pdf-doc-view-filter))))
#+end_src

* boilerplate
** my/org-path-name
#+begin_src emacs-lisp
  (defvar my/org-path-name (expand-file-name "~/Notebook/"))
#+end_src

** my/org-file-name
#+begin_src emacs-lisp
  (defun my/make-org-file-name (file-name)
    (concat my/org-path-name file-name))
#+end_src

** my/notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name (my/make-org-file-name "notes.org"))
#+end_src

** my/template-directory
#+begin_src emacs-lisp
  (defvar my/template-directory (concat my/org-path-name "templates"))
#+end_src

** my/make-template-file-name
#+begin_src emacs-lisp
  (defun my/make-template-file-name (file-name)
    (concat my/template-directory file-name))
#+end_src

* straight.el
[[https://github.com/raxod502/straight.el][Straight.el]] is a next-generation, purely functional package manager for the Emacs hacker.
#+INCLUDE: "../nougat/package-management/straight.org::bootstrap"
#+INCLUDE: "../nougat/package-management/straight.org::use-package integration"

* themes
** COMMENT Badger-theme
#+begin_src emacs-lisp
  (use-package badger-theme)
   :config (load-theme 'badger t))
#+end_src

** Solarized-theme
#+CAPTION: use solarized theme, it's purty.
#+begin_src emacs-lisp
(use-package solarized-theme)
(load-theme 'solarized-dark t)
#+end_src

#+begin_src emacs-lisp
;; only load the theme when we're in a GUI.
;;(use-package solarized-theme)
;;(when (display-graphic-p)
;;(load-theme 'solarized-dark t)
;;(enable-theme 'solarized-dark)
;;)
#+end_src

* emacs
#+INCLUDE: "../nougat/emacs/fonts.org"
#+INCLUDE: "../nougat/emacs/autosaves.org"
#+INCLUDE: "../nougat/emacs/backups.org"
#+INCLUDE: "../nougat/emacs/cursor.org"
#+INCLUDE: "../nougat/emacs/disable.org"
#+INCLUDE: "../nougat/emacs/editing.org"
#+INCLUDE: "../nougat/emacs/key-bindings.org"
#+INCLUDE: "../nougat/emacs/minor-modes.org"
#+INCLUDE: "../nougat/emacs/modeline.org"
#+INCLUDE: "../nougat/emacs/undo-tree.org"
#+INCLUDE: "../nougat/emacs/diff-kill.org"
#+INCLUDE: "../nougat/emacs/flycheck.org"
#+INCLUDE: "../nougat/emacs/neotree.org"
#+INCLUDE: "../nougat/emacs/dired.org"
#+INCLUDE: "../nougat/emacs/popwin.org"
#+INCLUDE: "../nougat/emacs/ws-butler.org"
#+INCLUDE: "../nougat/emacs/avy.org"

** exec-path from shell
[[https://github.com/purcell/exec-path-from-shell][This]] is a GNU Emacs library to ensure environment variables inside Emacs look the
same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns ox))
      (exec-path-from-shell-initialize)))
#+end_src

** COMMENT sr-speedbar
#+include: "../nougat/emacs/srspeedbar.org"

#+begin_src emacs-lisp
(setq speedbar-initial-expansion-list-name "quick buffers")
(global-set-key (kbd "M-1") 'sr-speedbar-toggle)
#+end_src

** COMMENT buffer-move
#+CAPTION: Move buffers around more easily 
#+begin_src emacs-lisp
  (use-package buffer-move
  :straight(buffer-move
  :type git
  :host github
  :repo "lukhas/buffer-move"))

  ;; ((global-set-key (kbd "<C-S-up>")     'buf-move-up)
  ;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  ;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  ;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)
  ;; ;;(setq buffer-move-stay-after-swap t)
  ;; ;;(setq buffer-move-behavior 'move)
  ;; )
#+end_src

** split window sensibly
#+CAPTION: from [[https://stackoverflow.com/questions/23659909/reverse-evaluation-order-of-split-height-threshold-and-split-width-threshold-in][SO]]
#+begin_src emacs-lisp
(defun my-split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it horizontally disregarding
             ;; the value of `split-width-threshold'.
             (let ((split-width-threshold 0))
               (when (window-splittable-p window t)
                 (with-selected-window window
                   (split-window-right))))))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+end_src

** auto-revert mode
Auto-revert acts a lot more like modern editors (sublime, etc).  I think.
#+CAPTION: auto-revert
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** display line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+end_src

** dashboard
#+CAPTION: Dashboard support
#+begin_src emacs-lisp
(use-package dashboard
  :straight (dashboard :type git
                       :host github
                       :repo "emacs-dashboard/emacs-dashboard")
;;  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
(setq dashboard-center-content t)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
;;                        (registers . 5)
))
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-set-navigator t)
(setq dashboard-set-footer nil)
#+end_src

** awesome-tabs
#+CAPTION: 
#+begin_src emacs-lisp
(use-package awesome-tab
  :straight (awesome-tab :type git
                         :host github
                         :repo "manateelazycat/awesome-tab")
  :config
  (awesome-tab-mode t)
)
#+end_src

* projectile
#+INCLUDE: "../nougat/packages/projectile/setup.org"

Override default project directory path.
#+begin_src emacs-lisp
  (setq projectile-project-directory (expand-file-name "~/Projects/"))
#+end_src

#+INCLUDE: "../nougat/packages/projectile/discover-projects.org"
* org-mode
#+INCLUDE: "../nougat/packages/org-mode/setup.org::setup"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::look"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::feel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::add languages to babel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::set default header args"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::disable code evaluation prompts"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-tidy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/nested-narrowing.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/dynamic-tag-position.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-export.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/htmlize.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/toc-org.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-jira.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-gfm.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-beamer.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-rst.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-avy.org"


#+INCLUDE: "../nougat/packages/org-mode/extras/org-projectile.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-hugo.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/gnuplot.org"
* helm
#+INCLUDE: "../nougat/packages/helm/setup.org"
#+INCLUDE: "../nougat/packages/helm/extras/ace-jump-helm-line.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-ag.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-bookmark.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-company.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-descbinds.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-flyspell.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-org-rifle.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-projectile.org"
* ivy
#+INCLUDE: "../nougat/packages/ivy/ivy.org"

* yasnippet
#+INCLUDE: "../nougat/packages/yasnippet/yasnippet.org"
* git
** gitignore
#+INCLUDE: "../nougat/packages/gitignore/gitignore.org"
** magit
#+INCLUDE: "../nougat/packages/magit/setup.org"
** github
*** gist
#+INCLUDE: "../nougat/packages/github/gist.org"
* multiple-cursors
#+INCLUDE: "../nougat/packages/multiple-cursors/multiple-cursors.org"
* pandoc mode
#+INCLUDE: "../nougat/packages/pandoc-mode/pandoc-mode.org"
* language support
** COMMENT CSV
#+INCLUDE: "../nougat/packages/csv-mode/csv-mode.org"
** LaTeX
#+INCLUDE: "../nougat/support/latex/latex.org"
** lisp
#+INCLUDE: "../nougat/support/lisp/lispy-mode.org"
** python
#+CAPTION: blacken lets you auto-blackify your python code
#+begin_src emacs-lisp
;;https://github.com/pythonic-emacs/blacken
(use-package blacken
:straight (blacken :type git :host github :repo "pythonic-emacs/blacken")
:init (blacken-mode))
(add-hook 'python-mode-hook 'blacken-mode)
(setq blacken-only-if-project-is-blackened t)
(setq blacken-allow-py36 t)
#+end_src


#+CAPTION: poetry https://github.com/galaunay/poetry.el
#+begin_src emacs-lisp
(use-package pyvenv
 :straight (pyvenv :type git
               :host github
               :repo "jorgenschaefer/pyvenv")
)
(use-package transient
 :straight (transient :type git
               :host github
               :repo "magit/transient")
)
(use-package poetry
:straight (poetry :type git
                  :host github
                  :repo "galaunay/poetry.el")
:config (poetry-tracking-mode)
)
#+end_src

#+INCLUDE: "../nougat/support/python/jedi.org"
#+INCLUDE: "../nougat/support/python/elpy.org"
** markdown
#+INCLUDE: "../nougat/support/markdown/markdown-mode.org"
** docker
#+INCLUDE: "../nougat/support/docker/dockerfile-mode.org"
** direnv
#+INCLUDE: "../nougat/support/direnv/direnv.org"

* hydra
#+INCLUDE: "../nougat/packages/hydra/setup.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-hera.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-bookmarks.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-elisp.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-helm.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-help.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-mark.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-org.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-projectile.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-python.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-register.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-window.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-yank-pop.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-zoom.org"
